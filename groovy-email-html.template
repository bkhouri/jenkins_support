<%
// The following imports are needed for the Robot Framework section of the template
 import java.text.DateFormat
 import java.text.SimpleDateFormat

 import hudson.plugins.descriptionsetter.DescriptionSetterAction
%>
<STYLE>
BODY, TABLE, TD, TH, P {
  font-family:Verdana,Helvetica,sans serif;
  font-size:11px;
  color:black;
}
h1 { color:black; }
h2 { color:black; }
h3 { color:black; }
TD.bg1 { color:white; background-color:#0000C0; font-size:120% }
TD.bg2 { color:white; background-color:#4040FF; font-size:110% }
TD.bg3 { color:white; background-color:#8080FF; }
TD.test_passed { color:blue; }
TD.test_failed { color:red; }
TD.console { font-family:Courier New; }
</STYLE>
<BODY>

<TABLE>
  <TR><TD align="right"><IMG SRC="${rooturl}static/e59dfe28/images/32x32/<%= build.result.toString() == 'SUCCESS' ? "blue.gif" : build.result.toString() == 'FAILURE' ? 'red.gif' : 'yellow.gif' %>" />
  </TD><TD valign="center"><B style="font-size: 200%;">BUILD ${build.result}</B></TD></TR>
  <TR><TD>URL</TD><TD><A href="${rooturl}${build.url}">${rooturl}${build.url}</A></TD></TR>
  <TR><TD>Project:</TD><TD>${project.name}</TD></TR>
  <TR><TD>Date:</TD><TD>${it.timestampString}</TD></TR>
  <TR><TD>Duration:</TD><TD>${build.durationString}</TD></TR>
	<%
def actions1 = build.actions // List<hudson.model.Action>
actions1.each() { action ->
	if( action.class.simpleName.equals("DescriptionSetterAction") ) { // hudson.plugins.robot.RobotBuildAction
		DescriptionSetterAction descriptionsetter = (DescriptionSetterAction) action
		%>
  <TR>
	<TD>Description:</TD>
	<TD>
		<%= descriptionsetter.getDescription() %>
		</TD>
  </TR>
		<%
	}
}
%>


  <TR><TD>Cause:</TD><TD><% build.causes.each() { cause -> %> ${cause.shortDescription} <%  } %></TD></TR>
</TABLE>
<BR/>

<!-- CHANGE SET -->
<% def changeSet = build.changeSet
if(changeSet != null) {
	def hadChanges = false %>
	<TABLE width="100%">
    <TR><TD class="bg1" colspan="2"><B>CHANGES</B></TD></TR>
<% 	changeSet.each() { cs ->
		hadChanges = true %>
      <TR>
        <TD colspan="2" class="bg2">&nbsp;&nbsp;Revision <B><%= cs.metaClass.hasProperty('commitId') ? cs.commitId : cs.metaClass.hasProperty('revision') ? cs.revision :
        cs.metaClass.hasProperty('changeNumber') ? cs.changeNumber : "" %></B> by
          <B><%= cs.author %>: </B>
          <B>(${cs.msgAnnotated})</B>
         </TD>
      </TR>
<%		cs.affectedFiles.each() { p -> %>
        <TR>
          <TD width="10%">&nbsp;&nbsp;${p.editType.name}</TD>
          <TD>${p.path}</TD>
        </TR>
<%		}
	}

	if(!hadChanges) { %>
        <TR><TD colspan="2">No Changes</TD></TR>
<%	} %>
  </TABLE>
<BR/>
<% } %>

<!-- ARTIFACTS -->
<% def artifacts = build.artifacts
if(artifacts != null && artifacts.size() > 0) { %>
  <TABLE width="100%">
    <TR><TD class="bg1"><B>BUILD ARTIFACTS</B></TD></TR>
    <TR>
      <TD>
<% 		artifacts.each() { f -> %>
      	  <li>
      	    <a href="${rooturl}${build.url}artifact/${f}">${f}</a>
      	  </li>
<%		} %>
      </TD>
    </TR>
  </TABLE>
<BR/>
<% } %>

<!-- MAVEN ARTIFACTS -->
<%
try {
  def mbuilds = build.moduleBuilds
  if(mbuilds != null) { %>
  <TABLE width="100%">
      <TR><TD class="bg1"><B>BUILD ARTIFACTS</B></TD></TR>
<%
    try {
        mbuilds.each() { m -> %>
        <TR><TD class="bg2"><B>${m.key.displayName}</B></TD></TR>
<%		m.value.each() { mvnbld ->
			def artifactz = mvnbld.artifacts
			if(artifactz != null && artifactz.size() > 0) { %>
      <TR>
        <TD>
<%				artifactz.each() { f -> %>
      	    <li>
      	      <a href="${rooturl}${mvnbld.url}artifact/${f}">${f}</a>
      	    </li>
<%				} %>
      	</TD>
      </TR>
<%			}
		}
       }
    } catch(e) {
	// we don't do anything
    }  %>
  </TABLE>
<BR/>
<% }

}catch(e) {
	// we don't do anything
}
%>

<!-- JUnit TEMPLATE -->

<% def junitResultList = it.JUnitTestResult
try {
 def cucumberTestResultAction = it.getAction("org.jenkinsci.plugins.cucumber.jsontestsupport.CucumberTestResultAction")
 junitResultList.add(cucumberTestResultAction.getResult())
} catch(e) {
        //cucumberTestResultAction not exist in this build
}
if (junitResultList.size() > 0) { %>
 <TABLE width="100%">
 <TR><TD class="bg1" colspan="2"><B>${junitResultList.first().displayName}</B></TD></TR>
 <% junitResultList.each{
  junitResult -> %>
     <% junitResult.getChildren().each { packageResult -> %>
        <TR><TD class="bg2" colspan="2"> Name: ${packageResult.getName()} Failed: ${packageResult.getFailCount()} test(s), Passed: ${packageResult.getPassCount()} test(s), Skipped: ${packageResult.getSkipCount()} test(s), Total: ${packageResult.getPassCount()+packageResult.getFailCount()+packageResult.getSkipCount()} test(s)</TD></TR>
        <% packageResult.getFailedTests().each{ failed_test -> %>
          <TR bgcolor="white"><TD class="test_failed" colspan="2"><B><li>Failed: ${failed_test.getFullName()} </li></B></TD></TR>
        <% }
      }
 } %>
 </TABLE>
 <BR/>
<%
} %>

<!-- Robot Framework Results -->
<%
def robotResults = false
def actions = build.actions // List<hudson.model.Action>
actions.each() { action ->
	if( action.class.simpleName.equals("RobotBuildAction") ) { // hudson.plugins.robot.RobotBuildAction
		robotResults = true
%>
  <TABLE width="100%">
    <TR><TD class="bg1"><B>ROBOT FRAMEWORK</B></TD></TR>
	<tr><td class="bg2">Summary</td></tr>
	<tr>
		<td>
			<table cellspacing="0" cellpadding="4" border="1" align="center">
				<thead>
					<tr bgcolor="#F3F3F3">
						<td><b>Type</b></td>
						<td><b>Total</b></td>
						<td><b>Passed</b></td>
						<td><b>Failed</b></td>
						<td><b>Pass %</b></td>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><b>All Tests</b></td>
						<td><%= action.result.overallTotal %></td>
						<td><%= action.result.overallPassed %></td>
						<td><%= action.result.overallFailed %></td>
						<td><%= action.overallPassPercentage %></td>
				</tr>
				<tr>
					<td><b>Critical Tests</b></td>
					<td><%= action.result.criticalTotal %></td>
					<td><%= action.result.criticalPassed %></td>
					<td><%= action.result.criticalFailed %></td>
					<td><%= action.criticalPassPercentage %></td>
				</tr>
				</tbody>
			</table>
		</td>
	</tr>
	<tr><td></td></tr>
	<tr><td class="bg2">Results</td><tr>
	<tr><td>
		<p><a href="${rooturl}${build.url}robot/report/report.html">Detailed Report</a><br>
		<a href="${rooturl}${build.url}robot/report/log.html">Log File</a>
		</p>
		<table cellspacing="0" cellpadding="4" border="1" align="center">
		<thead>
		<tr bgcolor="#F3F3F3">
		<td><b>Test Name</b></td>
		<td><b>Status</b></td>
		<td><b>Execution Datetime</b></td>
		</tr>
		</thead>
		<tbody>
		<% def suites = action.result.allSuites
		suites.each() { suite ->
			def currSuite = suite
			def suiteName = currSuite.displayName
			// ignore top 2 elements in the structure as they are placeholders
			while (currSuite.parent != null && currSuite.parent.parent != null) {
				currSuite = currSuite.parent
				suiteName = currSuite.displayName + "." + suiteName
				} %>
			<tr><td colspan="3"><b><%= suiteName %></b></td></tr>
			<%  DateFormat format = new SimpleDateFormat("yyyyMMdd HH:mm:ss.SS")
			def execDateTcPairs = []
			suite.caseResults.each() { tc ->
				Date execDate = format.parse(tc.starttime)
				execDateTcPairs << [execDate, tc]
			}
			// primary sort execDate, secondary displayName
			execDateTcPairs = execDateTcPairs.sort{ a,b -> a[1].displayName <=> b[1].displayName }
			execDateTcPairs = execDateTcPairs.sort{ a,b -> a[0] <=> b[0] }
			execDateTcPairs.each() {
				def execDate = it[0]
				def tc = it[1]  %>
				<tr>
				<td><%= tc.displayName %></td>
				<td style="color: <%= tc.isPassed() ? "#66CC00" : "#FF3333" %>"><%= tc.isPassed() ? "PASS" : "FAIL" %></td>
				<td><%= execDate %></td>
				</tr>
		<%
			} // tests
		} // suites %>
		</tbody></table>
	</tr></td></table><BR/>
	<%
	} // robot results
}
if (!robotResults) { %>
<!-- <p>No Robot Framework test results found.</p>  -->
<%
} %>

<!-- CONSOLE OUTPUT -->
<% if(build.result==hudson.model.Result.FAILURE) { %>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<TR><TD class="bg1"><B>CONSOLE OUTPUT</B></TD></TR>
<% 	build.getLog(100).each() { line -> %>
	<TR><TD class="console">${org.apache.commons.lang.StringEscapeUtils.escapeHtml(line)}</TD></TR>
<% 	} %>
</TABLE>
<BR/>
<% } %>

</BODY>
